{"version":3,"sources":["routes/TopRatedMovies/index.js","components/MovieCard/index.js","stores/movies/actions.js","components/MovieList/index.js","helpers/connectMovieList.js"],"names":["connectMovieList","id","title","fetchDataCallback","getTopRatedList","MovieCardParent","styled","div","StyledImg","img","connect","state","props","data","get","imagesConfig","movie","secureBaseUrl","posterSize","history","useHistory","onClick","push","src","getList","isGenre","dispatch","getState","a","undefined","Error","movies","listObject","lists","currentPageIndex","index","listId","type","INIT_FETCH_LIST","payload","genre","pageIndex","list","results","map","SET_LIST","page","SET_MOVIES","console","log","ERROR_FETCH_LIST","getPopularList","getPopular","getTopRated","getNowPlayingList","getNowPlaying","getGenreMovieList","genreId","getFromGenre","MovieCardContainer","TitleContainer","theme","secondary","breakpoints","xs","ButtonWrapper","Button","button","MovieList","config","useEffect","isLoading","length","key","disabled","color","text","isError"],"mappings":"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","file":"static/js/6.301ff022.chunk.js","sourcesContent":["import { getTopRatedList } from 'stores/movies/actions';\nimport connectMovieList from 'helpers/connectMovieList';\n\n/**\n * HOC to show Movies that are TopRated\n * - Connected Component returned by connectMovieList function\n * @name Route/Popular\n * @component\n */\nexport default connectMovieList({ \n    id: 'topRated',\n    title: 'Top Rated Movies',\n    fetchDataCallback: getTopRatedList \n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nconst MovieCardParent = styled.div`\n    position: relative;\n    flex: 0 0 17%;\n    display: flex;\n    justify-content: space-around;\n    margin: 1em;\n    transition: transform 0.3s ease;\n    color: white;\n\n    :hover {\n        cursor: pointer;\n        transform: scale(1.1);\n        z-index: 2;\n    }\n\n    @media screen and (max-width: 1440px) {\n        flex: 1 0 15%;\n    }\n    @media screen and (max-width: 720px) {\n        flex: 0 0 25%;\n    }\n    @media screen and (max-width: 540px) {\n        flex: 1 0 33%;\n    }\n`\n\nconst StyledImg = styled.img`\n    width: 100%;\n    height: 100%;\n`;\n\n/**\n * @name MovieCard\n * @component\n * @param {Object} movie - The movie Object containing the data\n * @param {string} secureBaseUrl - URL to fetch the asset\n * @param {string} posterSize - Size of poster image \n */\nconst MovieCard = ({ movie, secureBaseUrl, posterSize }) => {\n    const history = useHistory();\n    return (\n        <>\n            {/* check that movie is defined in state before rendering */}\n            {movie && (\n                <MovieCardParent onClick={() => history.push(`/movie/${get(movie, 'id')}`)}>\n                <StyledImg\n                    src={`${secureBaseUrl}${posterSize}/${get(movie, 'poster_path')}`}\n                />\n                </MovieCardParent>\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = (state, props) => {\n    const data = get(state, 'movies.data');\n    const imagesConfig = get(state, 'config.images');\n    \n    return {\n        movie: props.movie || data[props.id] || null,\n        secureBaseUrl: get(imagesConfig, 'secure_base_url'),\n        posterSize: get(imagesConfig, 'poster_sizes[3]')\n    }\n}\n\nexport default connect(mapStateToProps, null)(MovieCard)\n","import get from 'lodash.get';\nimport { SET_MOVIE, SET_MOVIES, INIT_FETCH_LIST, SET_LIST, ERROR_FETCH_LIST } from './types';\nimport { getPopular, getTopRated, getNowPlaying, getFromGenre } from 'api';\n\nexport const setMovie = movie => dispatch => {\n    dispatch({\n        type: SET_MOVIE,\n        payload: {\n            ...movie\n        },\n    })\n}\n\nexport const setMovies = movies => dispatch => {\n    dispatch({\n        type: SET_MOVIES,\n        payload: {\n            movies: movies\n        },\n    })\n}\n\n/**\n * A function to create and update all movie lists within the application\n * Acts as a wrapper to create a Thunk\n * @param {string} id - List id \n * @param {Function} fetchDataCallback - Callback function that obtains data from the API\n * @param {boolean} isGenre - Boolean to indicate whether a movie list is a Genre\n */\nexport const getList = ({ id, fetchDataCallback, isGenre } = {}) => async (dispatch, getState) => {\n    // PARAMS must be provided - throw error outside catch as an unrecoverable error\n    if(id === undefined){\n        throw new Error('Missing List ID in getList Action')\n    }\n\n    if(fetchDataCallback === undefined){\n        throw new Error('Missing List callback in getList Action')\n    }\n\n    const state = getState().movies;\n    const listObject = isGenre ? get(state.lists, `genre/${id}`) : get(state.lists, id) \n    const currentPageIndex = listObject ? listObject.index : 0\n\n    const listId = isGenre ? `genre/${id}` : id;\n\n    try {\n        dispatch({\n            type: INIT_FETCH_LIST,\n            payload:{\n                id: listId\n            }\n        })\n\n        const data = await fetchDataCallback({\n            ...isGenre && { genre: id },\n            pageIndex: currentPageIndex + 1\n        })\n\n        const list = data.results.map(movie => movie.id)\n\n        dispatch({\n            type: SET_LIST,\n            payload: {\n                id: listId,\n                list: list,\n                index: data.page\n            },\n        })\n\n        dispatch({\n            type: SET_MOVIES,\n            payload: {\n                movies: data.results\n            }\n        })\n    } catch(e){\n        console.log(e)\n        dispatch({\n            type: ERROR_FETCH_LIST,\n            payload: {\n                id: listId,\n                index: currentPageIndex\n            }\n        })\n    }\n};\n\nexport const getPopularList = () => getList({ id: 'popular', fetchDataCallback: getPopular })\nexport const getTopRatedList = () => getList({ id: 'topRated', fetchDataCallback: getTopRated })\nexport const getNowPlayingList = () => getList({ id: 'nowPlaying', fetchDataCallback: getNowPlaying })\nexport const getGenreMovieList = genreId => getList({ isGenre: true, id: genreId, fetchDataCallback: getFromGenre })","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport theme from 'helpers/theme';\nimport Card from 'components/MovieCard';\nimport Loader from 'components/Loader';\nimport Error from 'components/Error';\n\nconst MovieCardContainer = styled.div`\n    display: flex;\n    flex-flow: row wrap;\n    padding: 0.1em;\n    justify-content: center;\n\n    :focus {\n        outline: none;\n        border: none;\n    }\n    @media screen and (max-width: 1140px) {\n        padding: 1.5em;\n    }\n    @media screen and (max-width: 992px) {\n        padding: 1em 0.65em;\n    }\n    @media screen and (max-width: 768px) {\n        padding: 0.35em;\n    }\n    @media screen and (max-width: 576px) {\n        padding: 0.1em;\n    }\n`;\n\nconst TitleContainer = styled.div`\n    color: ${({ theme }) => theme.secondary};\n    font-size: 1.6em;\n    padding-left: 0.6em;\n    width: 100%;\n    font-weight: bold;\n    border-bottom: 1px solid ${({ theme }) => theme.secondary};\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.xs}) {\n        font-size: 1.4em;\n        margin-top: .5em;\n    }\n`\n\nconst ButtonWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nconst Button = styled.button`\n    display: flex;\n    height: 60px;\n    align-items: center;\n    background: transparent;\n    border: 1px solid ${({ theme }) => theme.secondary};\n    padding: 1.3em;\n    margin: 1em 0 3em 0;\n    color: white;\n    border-radius: 1em;\n    font-weight: bold;\n    cursor: pointer;\n`\n\n/**\n * Movie List Component that fetches data and then displays a MovieCard list\n * \n * @component\n * @param {Object} listObject - List Object containing different properties\n * @param {boolean} listObject.isLoading - ListObject property that shows whether data for a given list is being fetched\n * @param {boolean} listObject.isError - ListObject property that shows whether or not there was an error during data fetch\n * @param {number[]} listObject.list - ListObject property that contains a list of movie ids\n * @param {Object} config - Config Object containing different properties\n * @param {boolean} config.isLoading - Config property that shows whether the config data is being fetched\n * @param {Function} fetchDataCallback - Redux Action that performs the data fetch for a given list\n * @param {string} title - Title of List\n */\nconst MovieList = ({ listObject, fetchDataCallback, config, title }) => {\n    /**\n     * Initialise data on mount by calling fetchDataCallback action\n     */\n    useEffect(() => {\n        // only dispatch action if list object is not in store\n        if(!listObject){\n            fetchDataCallback()\n        }\n    }, [listObject, fetchDataCallback])\n\n    const handleClick = () => {\n        fetchDataCallback();\n    }\n    \n    return (\n        <>\n            <TitleContainer>{title}</TitleContainer>\n            {listObject && 'list' in listObject && config && !config.isLoading && listObject.list.length > 0 &&(\n                <>\n                    <MovieCardContainer>\n                        {listObject.list && listObject.list.map(id => (\n                            <Card id={id} key={id} />\n                        ))}\n                    </MovieCardContainer>\n                    <ButtonWrapper>\n                        <Button onClick={() => handleClick()} disabled={listObject.isLoading}>\n                            {listObject.isLoading ? <Loader color={theme.secondary} /> : 'Fetch More'}\n                        </Button>\n                    </ButtonWrapper>\n                </>\n            )}\n\n            {listObject && config && (listObject.isLoading || config.isLoading) && !listObject.list &&(\n                <Loader color={theme.secondary} />\n            )}\n\n            {listObject && config && !listObject.isLoading && !config.isLoading && listObject.list.length <= 0 && (\n                <Error text={'Could Not Find List'} />\n            )}\n\n            {listObject && listObject.isError && (\n                <Error text={'Something went wrong :('} />\n            )}\n        </>\n)}\n\nexport default MovieList;","import { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport MovieList from 'components/MovieList';\n\n/**\n * @function connectMovieList - Connects a list to a MovieList Component\n * @param {string} id - The List id\n * @param {string} title - Movie list title\n * @param {Function} fetchDataCallback - Redux Action that performs the data fetch\n */\nconst connectMovieList = ({ id, title, fetchDataCallback }) => {\n    return connect(state => {\n        const listObject = get(state, `movies.lists.${id}`);\n        return {\n            listObject: listObject || null,\n            config: get(state, 'config'),\n            title: title || ''\n        }\n    }, dispatch => ({\n        fetchDataCallback: () => dispatch(fetchDataCallback()),\n    }))(MovieList);\n}\n\nexport default connectMovieList;"],"sourceRoot":""}