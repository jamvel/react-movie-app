{"version":3,"sources":["api/search-movies.js","api/get-configuration.js","api/get-genres.js","api/get-popular.js","api/get-now-playing.js","api/get-top-rated.js","api/get-movie-details.js","api/get-from-genre.js","helpers/fontAwesomeLibrary.js","helpers/theme.js","stores/ui/actions.js","stores/ui/types.js","components/SearchResult/index.js","components/Search/index.js","components/Header/index.js","helpers/routeMap.js","components/Menu/index.js","components/GenreList/index.js","components/Error/index.js","stores/movies/actions.js","stores/movies/types.js","components/MovieCard/index.js","components/Loader/index.js","components/MovieList/index.js","helpers/connectMovieList.js","routes/PopularMovies/index.js","routes/TopRatedMovies/index.js","routes/NowPlayingMovies/index.js","routes/MoviesByGenre/index.js","routes/Movie/index.js","components/App/index.js","stores/config/actions.js","stores/config/types.js","stores/config/reducer.js","stores/movies/reducer.js","stores/ui/reducer.js","stores/index.js","serviceWorker.js","index.js"],"names":["tokenSource","a","axios","get","data","defaultParams","pageIndex","region","process","language","params","page","appendToResponse","id","Error","append_to_response","query","cancel","CancelToken","source","cancelToken","token","isCancel","cancelPrevQuery","genre","with_genres","library","add","faFilm","faSearch","faTimes","faBars","faClock","faStar","primary","secondary","breakpoints","xs","sm","md","lg","toggleSearch","value","dispatch","type","payload","toggleMenu","ResultParent","styled","div","PosterImagePlaceHolder","props","theme","ResultInfoParent","ResultTitle","ResultDesc","connect","state","imagesConfig","showSearch","ui","secureBaseUrl","posterSize","toggleSearchRx","toggle","movie","history","useHistory","onClick","push","poster_path","src","alt","icon","color","title","Date","release_date","getFullYear","overview","Parent","InputParent","Input","input","Results","Search","useState","searchValue","setSearchValue","setSearchQuery","searchData","setSearchData","isError","setIsError","getSearchData","length","searchMovies","size","autoFocus","onChange","e","target","search","debounce","prevSearch","results","map","HeaderParent","BrandWrapper","HeaderWrapper","IconWrapper","openMenuRx","route","MenuWrapper","nav","open","HeaderElement","MenuElement","genresRoutes","g","name","items","routeMap","concat","showMenu","closeMenuRx","item","key","GenreListWrapper","Genre","genres","ErrorWrapper","text","getList","fetchDataCallback","isGenre","getState","undefined","movies","listObject","lists","currentPageIndex","index","listId","list","console","log","MovieCardParent","StyledImg","img","LoaderWrapper","Loader","MovieCardContainer","TitleContainer","ButtonWrapper","Button","button","MovieList","config","useEffect","isLoading","disabled","connectMovieList","getPopular","getTopRated","getNowPlaying","ownProps","find","toString","genreId","getFromGenre","Background","background","Wrapper","TitleWrapper","Title","Genres","InfoTitle","TagLine","InfoWrapper","Overview","VideoWrapper","Similar","movieRx","movieData","setMovieData","setIsLoading","getMovieDetails","getData","backdrop_path","runtime","vote_average","vote_count","tagline","homepage","href","rel","videos","site","url","playing","width","controls","similar","GlobalStyle","createGlobalStyle","initConfigRx","getConfiguration","getGenres","location","exact","path","component","PopularMovies","TopRatedMovies","NowPlayingMovies","render","MoviesByGenre","match","action","initialState","forEach","makeStore","createStore","combineReducers","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","f","Boolean","hostname","defaults","baseURL","REACT_APP_TMDB_API_KEY","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a14da29d.chunk.js","sourcesContent":["import axios from 'axios';\n\nlet tokenSource;\nexport default async query => {\n    try {\n        if (typeof tokenSource !== typeof undefined) {\n            tokenSource.cancel('Operation canceled due to new request.');\n        }\n        // save the new request for cancellation\n        tokenSource = axios.CancelToken.source();\n    \n        const { data } = await axios.get('/search/movie', {\n            params: {\n                query\n            },\n            cancelToken: tokenSource.token\n        });\n    \n        return { data };\n    } catch (e) {\n        if (axios.isCancel(e)){\n            return { \n                cancelPrevQuery: true \n            };\n        }\n        throw e;\n    }\n}","import axios from 'axios';\n\nexport default async () => {\n    try {\n        const { data } = await axios.get('/configuration')\n        return data;\n    }catch(e){\n        throw (e)\n    }\n}","import axios from 'axios';\n\nexport default async () => {\n    try {\n        const { data } = await axios.get('/genre/movie/list')\n        return data;\n    }catch(e){\n        throw (e)\n    }\n}","import axios from 'axios';\n\nconst defaultRegion = process.env.REACT_APP_TMDB_DEFAULT_REGION || 'US';\nconst defaultLanguage = process.env.REACT_APP_TMDB_DEFAULT_LANGUAGE || 'en-US';\n\nconst defaultParams = {\n    pageIndex: 1,\n    region: defaultRegion,\n    language: defaultLanguage\n}\n\nexport default async ({ pageIndex, region, language } = defaultParams) => {\n    try {\n        const { data } = await axios.get('/movie/popular', {\n            params: {\n                page: pageIndex,\n                region,\n                language\n            }\n        })\n        return data;\n    }catch(e){\n        throw (e)\n    }\n}","import axios from 'axios';\n\nconst defaultRegion = process.env.REACT_APP_TMDB_DEFAULT_REGION || 'US';\nconst defaultLanguage = process.env.REACT_APP_TMDB_DEFAULT_LANGUAGE || 'en-US';\n\nconst defaultParams = {\n    pageIndex: 1,\n    region: defaultRegion,\n    language: defaultLanguage\n}\n\nexport default async ({ pageIndex, region, language } = defaultParams) => {\n    try {\n        const { data } = await axios.get('/movie/now_playing', {\n            params: {\n                page: pageIndex,\n                region,\n                language\n            }\n        })\n        return data;\n    }catch(e){\n        throw (e)\n    }\n}","import axios from 'axios';\n\nconst defaultRegion = process.env.REACT_APP_TMDB_DEFAULT_REGION || 'US';\nconst defaultLanguage = process.env.REACT_APP_TMDB_DEFAULT_LANGUAGE || 'en-US';\n\nconst defaultParams = {\n    pageIndex: 1,\n    region: defaultRegion,\n    language: defaultLanguage\n}\n\nexport default async ({ pageIndex, region, language } = defaultParams) => {\n    try {\n        const { data } = await axios.get('/movie/top_rated', {\n            params: {\n                page: pageIndex,\n                region,\n                language\n            }\n        })\n        return data;\n    }catch(e){\n        throw (e)\n    }\n}","import axios from 'axios';\n\nconst defaultParams = {\n    appendToResponse: 'videos,similar'\n}\n\nexport default async (id, { appendToResponse } = defaultParams) => {\n    try {\n        if(!id){\n            throw new Error('Movie ID cannot be undefined')\n        }\n        const { data } = await axios.get(`/movie/${id}`, {\n            params: {\n                append_to_response: appendToResponse\n            }\n        })\n        return data;\n    }catch(e){\n        throw (e)\n    }\n}","import axios from 'axios';\n\nconst defaultRegion = process.env.REACT_APP_TMDB_DEFAULT_REGION || 'US';\nconst defaultLanguage = process.env.REACT_APP_TMDB_DEFAULT_LANGUAGE || 'en-US';\n\nconst defaultParams = {\n    pageIndex: 1,\n    region: defaultRegion,\n    language: defaultLanguage\n}\n\nexport default async ({ genre, pageIndex, region, language } = defaultParams) => {\n    try {\n        const { data } = await axios.get('/discover/movie', {\n            params: {\n                page: pageIndex,\n                region,\n                language,\n                with_genres: genre\n            }\n        })\n        return data;\n    }catch(e){\n        throw (e)\n    }\n}","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faFilm, faSearch, faTimes, faBars, faClock, faStar } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faFilm)\nlibrary.add(faSearch);\nlibrary.add(faTimes);\nlibrary.add(faBars);\nlibrary.add(faClock);\nlibrary.add(faStar);","export default {\n    primary: '#2c3949',\n    secondary: '#fff',\n    breakpoints: {\n        xs: '576px',\n        sm: '768px',\n        md: '992px',\n        lg: '1140px'\n    }\n}","import { TOGGLE_SEARCH, TOGGLE_MENU } from './types';\n\nexport const toggleSearch = (value = null) => dispatch => {\n    dispatch({\n        type: TOGGLE_SEARCH,\n        payload: value,\n    })\n};\n\nexport const toggleMenu = (value = null) => dispatch => {\n    dispatch({\n        type: TOGGLE_MENU,\n        payload: value,\n    })\n};","export const TOGGLE_SEARCH = 'TOGGLE_SEARCH';\nexport const TOGGLE_MENU = 'TOGGLE_MENU';","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useHistory } from \"react-router-dom\";\nimport get from 'lodash.get';\n\nimport { toggleSearch } from 'stores/ui/actions'\n\nconst ResultParent = styled.div`\n    display: flex;\n    flex-direction: row;\n    max-height: 68px;\n    border-bottom: 1px solid lightgrey;\n    cursor: pointer;\n    transition: transform 0.3s ease;\n\n    :hover {\n        transform: scale(1.008);\n        z-index: 2;\n    }\n`\n\nconst PosterImagePlaceHolder = styled.div`\n    width: 45px;\n    height: 68px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.primary};\n\n    > img {\n        width: 45px;\n        height: 68px;\n    }\n`\n\nconst ResultInfoParent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    width: calc(100% - 50px);\n    overflow: hidden;\n    padding: 0 5px;\n`\nconst ResultTitle = styled.div`\n    font-weight: bold;\n`\n\nconst ResultDesc = styled.div`\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: 12px;\n`\n\nconst Result = ({ movie, secureBaseUrl, posterSize, toggleSearchRx }) => {\n    const history = useHistory();\n    return (\n        <ResultParent \n            onClick={() => {\n                toggleSearchRx(false)\n                history.push(`/movie/${movie.id}`)\n            }}\n        >\n            <PosterImagePlaceHolder>\n                {movie.poster_path ? (\n                    <img src={`${secureBaseUrl}${posterSize}/${movie.poster_path}`} alt=\"Poster\" />\n                ) : (\n                    <FontAwesomeIcon icon=\"film\" color='white' />\n                )}\n            </PosterImagePlaceHolder>\n            <ResultInfoParent>\n                <ResultTitle>{movie.title} ({new Date(movie.release_date).getFullYear()})</ResultTitle>\n                <ResultDesc>\n                    {movie.overview}\n                </ResultDesc>\n            </ResultInfoParent>\n        </ResultParent>\n    )\n}\n\nconst mapStateToProps = state => {\n    const imagesConfig = get(state, 'config.images');\n    return {\n        showSearch: state.ui.showSearch,\n        secureBaseUrl: get(imagesConfig, 'secure_base_url'),\n        posterSize: get(imagesConfig, 'logo_sizes[3]')\n    }\n}\n  \nconst mapDispatchToProps = dispatch => ({\n    toggleSearchRx: toggle => dispatch(toggleSearch(toggle))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);","import React, { useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport Result from 'components/SearchResult';\nimport { searchMovies } from 'api';\n\nconst Parent = styled.div`\n    width: 100%;\n    position: absolute;\n    height: auto;\n    box-sizing: border-box;\n    background: white;\n    z-index: 3;\n`\n\nconst InputParent = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 5px 15px;\n    border-bottom: 1px solid ${props => props.theme.primary};\n`\n\nconst Input = styled.input`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    font-size: 16px;\n    font-family: inherit;\n    padding: 0 10px;\n    border: none;\n\n    :focus {\n        outline: none;\n    }\n`\n\nconst Results = styled.div`\n    height: auto;\n    color: black;\n    font-size: 14px;\n    font-family: inherit;\n    max-height: 80vh;\n    overflow: scroll;\n`\n\nconst Error = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: 1em;\n`\n\nconst Search = () => {\n    const [searchValue, setSearchValue] = useState(\"\");\n    const [searchQuery, setSearchQuery] = useState({}); // eslint-disable-line no-unused-vars\n    const [searchData, setSearchData] = useState({});\n    const [isError, setIsError] = useState(false);\n\n    const handleChange = e => {\n        const { value } = e.target;\n        setSearchValue(value);\n\n        const search = debounce(getSearchData, 1000);\n\n        setSearchQuery(prevSearch => {\n            if (prevSearch.cancel) {\n              prevSearch.cancel();\n            }\n            return search;\n        });\n\n        search(value);\n    }\n\n    const getSearchData = async value => {\n        try {\n            if(value.length > 1){\n                const { cancelPrevQuery, data } = await searchMovies(value);\n        \n                if (cancelPrevQuery){\n                    return;\n                }\n        \n                setSearchData(data)\n                if(isError){\n                    setIsError(false)\n                }\n            }\n        }catch(e){\n            setIsError(true)\n        }\n    }\n\n    return (\n        <Parent>\n            <InputParent>\n                <FontAwesomeIcon icon=\"search\" color='grey' size='xs' />\n                <Input\n                    autoFocus\n                    value={searchValue}\n                    onChange={handleChange}\n                />\n            </InputParent>\n            <Results>\n                {'results' in searchData && searchData.results.map(movie => (\n                    <Result movie={movie} />\n                ))}\n                {isError && (\n                    <Error>Something went wrong whilst searching</Error>\n                )}\n            </Results>\n        </ Parent>\n)}\n\nexport default Search;","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useHistory } from 'react-router-dom';\n\nimport { toggleSearch, toggleMenu } from 'stores/ui/actions'\n\nimport Search from 'components/Search';\n\nconst HeaderParent = styled.div`\n    width: 100%;\n    height: 50px;\n    color: white;\n    font-size: 1.5em;\n    padding-top: .3em;\n`\n\nconst BrandWrapper = styled.div`\n    margin-left: 1em;\n    user-select: none;\n    cursor: pointer;\n`\n\nconst HeaderWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    > svg {\n        font-size: 20px;\n        cursor: pointer;\n    }\n`\n\nconst IconWrapper = styled.div`\n    svg {\n        margin-left: 0.7em;\n        cursor: pointer;\n\n        :last-child {\n            margin-right: 1em;\n        }\n    }\n`\n\nconst Header = ({ showSearch, toggleSearchRx, openMenuRx }) => {\n    const history = useHistory();\n    return (\n        <HeaderParent>\n            <HeaderWrapper>\n                <BrandWrapper onClick={() => history.push('/')}>\n                    <FontAwesomeIcon icon=\"film\" /> React <span>Movies</span>\n                </BrandWrapper>\n                <IconWrapper>\n                    <FontAwesomeIcon \n                        icon={showSearch ? 'times' : 'search'}\n                        onClick={() => toggleSearchRx()}\n                    />\n                    <FontAwesomeIcon \n                        icon='bars'\n                        onClick={() => openMenuRx()}\n                    />\n                </IconWrapper>\n            </HeaderWrapper>\n            {showSearch && (\n                <Search />\n            )}\n        </HeaderParent>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        showSearch: state.ui.showSearch\n    }\n}\n  \nconst mapDispatchToProps = dispatch => ({\n    toggleSearchRx: (toggle = null) => dispatch(toggleSearch(toggle)),\n    openMenuRx: () => dispatch(toggleMenu(true))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","export default [\n    { title: 'Popular Movies', route: '/' },\n    { title: 'Top Rated Movies', route: '/top' },\n    { title: 'Now Playing', route: '/now-playing' }\n]","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport get from 'lodash.get';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useHistory } from 'react-router-dom';\nimport { toggleMenu } from 'stores/ui/actions';\n\nimport routeMap from 'helpers/routeMap';\n\nconst MenuWrapper = styled.nav`\n    position: fixed;\n    top: 0;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    background: #1f262d;\n    width: 350px;\n    color: ${({ theme }) => theme.secondary};\n    transform: ${({ open }) => open ? 'translateX(0)' : 'translateX(100%)'};\n    height: 100%;\n    text-align: left;\n    transition: transform 0.4s ease-in-out;\n    z-index: 99;\n    overflow-y: scroll;\n    @media (max-width: ${({ theme }) => theme.breakpoints.xs}) {\n        width: 100%;\n    }\n`;\n\nconst HeaderElement = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 1.4em;\n    padding: .8em;\n\n    span {\n        margin-left: 5px;\n    }\n\n    > svg {\n        font-size: 1.1em;\n        cursor: pointer;\n\n        :hover {\n            transition: all .4s ease;\n            transform: scale(1.1);\n        }\n    }\n`\n\nconst MenuElement = styled.div`\n    font-size: .95em;\n    border-color: blue;\n    border-top: 1px solid;\n    border-bottom: 1px solid;\n    padding: 1em;\n    \n    :hover {\n        cursor: pointer;\n    }\n`\n\nconst Menu = ({ showMenu, items, closeMenuRx }) => {\n    const history = useHistory();\n\n    const handleElementClick = route => {\n        if(route){\n            closeMenuRx(false);\n            history.push(route)\n        }\n    }\n\n    return (\n        <MenuWrapper \n            open={showMenu}\n        >\n            <HeaderElement>\n                <span>\n                    <FontAwesomeIcon icon=\"film\" />\n                    <span>React Movies</span>\n                </span>\n                <FontAwesomeIcon\n                    onClick={() => closeMenuRx()}\n                    icon=\"times\" \n                />\n            </HeaderElement>\n            {items.map(item => (\n                <MenuElement\n                    onClick={() => handleElementClick(item.route)}\n                    key={item.route}\n                >\n                    {item.title}\n                </MenuElement>\n            ))}\n        </MenuWrapper>\n    )\n}\n\nconst mapStateToProps = state => {\n    const genres = get(state, 'config.genres') || []\n    const genresRoutes = genres.map(g => {\n        return {\n            title: `Genre: ${g.name}`,\n            route: `/genre/${g.id}`\n        }\n    }) \n    \n    return {\n        items: routeMap.concat(genresRoutes),\n        showMenu: get(state, 'ui.showMenu')\n    }\n}\n  \nconst mapDispatchToProps = dispatch => ({\n    closeMenuRx: () => dispatch(toggleMenu(false))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nconst GenreListWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    background: transparent;\n    overflow-x: overlay;\n    padding: 1em 0;\n    :hover {\n        cursor: url(/scroll.png) 32 15, auto;\n    }\t\n`\n\nconst Genre = styled.div`\n    background: transparent;\n    color: ${({ theme }) => theme.secondary};\n    border: 1px solid ${({ theme }) => theme.secondary};\n    border-radius: 1em;\n    display: flex;\n    align-items: center;\n    flex-basis: 200px;\n    flex-grow: 0;\n    flex-shrink: 0;\n    justify-content: center;\n    margin: 0 1em;\n    padding: .5em 0;\n\n    :hover {\n        background: maroon;\n    }\n`\n\nconst GenreList = ({ genres }) => {\n    const history = useHistory();\n    const handleClick = id => {\n        history.push(`/genre/${id}`)\n    }\n    return (\n        <>\n            {genres.length > 0 && (\n                <GenreListWrapper>\n                    {genres.map(genre => (\n                        <Genre\n                            key={genre.id}\n                            onClick={() => handleClick(genre.id)}\n                        >\n                            {genre.name}\n                        </Genre>\n                    ))}\n                </GenreListWrapper>\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        genres: get(state, 'config.genres') || []\n    }\n}\n\nexport default connect(mapStateToProps, null)(GenreList);","import React from 'react';\nimport styled from 'styled-components';\n\nconst ErrorWrapper = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: ${({ theme }) => theme.secondary};\n    font-size: 1.5em;\n`\n\nconst Error = ({ text }) => (\n    <ErrorWrapper>\n        {text}\n    </ErrorWrapper>\n)\n\nexport default Error;","import get from 'lodash.get';\nimport { SET_MOVIE, SET_MOVIES, INIT_FETCH_LIST, SET_LIST, ERROR_FETCH_LIST } from './types';\nimport { getPopular, getTopRated, getNowPlaying, getFromGenre } from 'api';\n\nexport const setMovie = movie => dispatch => {\n    dispatch({\n        type: SET_MOVIE,\n        payload: {\n            ...movie\n        },\n    })\n}\n\nexport const setMovies = movies => dispatch => {\n    dispatch({\n        type: SET_MOVIES,\n        payload: {\n            movies: movies\n        },\n    })\n}\n\n\nexport const getList = ({ id, fetchDataCallback, isGenre } = {}) => async (dispatch, getState) => {\n    // PARAMS must be provided - throw error outside catch as an unrecoverable error\n    if(id === undefined){\n        throw new Error('Missing List ID in getList Action')\n    }\n\n    if(fetchDataCallback === undefined){\n        throw new Error('Missing List callback in getList Action')\n    }\n\n    const state = getState().movies;\n    const listObject = isGenre ? get(state.lists, `genre/${id}`) : get(state.lists, id) \n    const currentPageIndex = listObject ? listObject.index : 0\n\n    const listId = isGenre ? `genre/${id}` : id;\n\n    try {\n        dispatch({\n            type: INIT_FETCH_LIST,\n            payload:{\n                id: listId\n            }\n        })\n\n        const data = await fetchDataCallback({\n            ...isGenre && { genre: id },\n            pageIndex: currentPageIndex + 1\n        })\n\n        const list = data.results.map(movie => movie.id)\n\n        dispatch({\n            type: SET_LIST,\n            payload: {\n                id: listId,\n                list: list,\n                index: data.page\n            },\n        })\n\n        dispatch({\n            type: SET_MOVIES,\n            payload: {\n                movies: data.results\n            }\n        })\n    } catch(e){\n        console.log(e)\n        dispatch({\n            type: ERROR_FETCH_LIST,\n            payload: {\n                id: listId,\n                index: currentPageIndex\n            }\n        })\n    }\n};\n\nexport const getPopularList = () => getList({ id: 'popular', fetchDataCallback: getPopular })\nexport const getTopRatedList = () => getList({ id: 'topRated', fetchDataCallback: getTopRated })\nexport const getNowPlayingList = () => getList({ id: 'nowPlaying', fetchDataCallback: getNowPlaying })\n\nexport const getGenreMovieList = genreId => getList({ isGenre: true, id: genreId, fetchDataCallback: getFromGenre })","export const SET_MOVIE = 'SET_MOVIE';\nexport const SET_MOVIES = 'SET_MOVIES';\nexport const SET_LIST = 'SET_LIST'\nexport const INIT_FETCH_LIST = 'INIT_FETCH_LIST';\nexport const ERROR_FETCH_LIST = 'ERROR_FETCH_LIST';","import React from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nconst MovieCardParent = styled.div`\n    position: relative;\n    flex: 0 0 17%;\n    display: flex;\n    justify-content: space-around;\n    margin: 1em;\n    transition: transform 0.3s ease;\n    color: white;\n\n    :hover {\n        cursor: pointer;\n        transform: scale(1.1);\n        z-index: 2;\n    }\n\n    @media screen and (max-width: 1440px) {\n        flex: 1 0 15%;\n    }\n    @media screen and (max-width: 720px) {\n        flex: 0 0 25%;\n    }\n    @media screen and (max-width: 540px) {\n        flex: 1 0 33%;\n    }\n`\n\nconst StyledImg = styled.img`\n    width: 100%;\n    height: 100%;\n`;\n\nconst MovieCard = ({ movie, secureBaseUrl, posterSize }) => {\n    const history = useHistory();\n    return (\n        <>\n            {/* check that movie is defined in state before rendering */}\n            {movie && (\n                <MovieCardParent onClick={() => history.push(`/movie/${get(movie, 'id')}`)}>\n                <StyledImg\n                    src={`${secureBaseUrl}${posterSize}/${get(movie, 'poster_path')}`}\n                />\n                </MovieCardParent>\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = (state, props) => {\n    const data = get(state, 'movies.data');\n    const imagesConfig = get(state, 'config.images');\n    \n    return {\n        movie: props.movie || data[props.id] || null,\n        secureBaseUrl: get(imagesConfig, 'secure_base_url'),\n        posterSize: get(imagesConfig, 'poster_sizes[3]')\n    }\n}\n\nexport default connect(mapStateToProps, null)(MovieCard)\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Ellipsis } from 'react-awesome-spinners';\n\nconst LoaderWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nconst Loader = ({ ...props }) => (\n    <LoaderWrapper>\n        <Ellipsis\n            {...props}\n        />\n    </LoaderWrapper>\n)\n\nexport default Loader;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport theme from 'helpers/theme';\nimport Card from 'components/MovieCard';\nimport Loader from 'components/Loader';\nimport Error from 'components/Error';\n\nconst MovieCardContainer = styled.div`\n    display: flex;\n    flex-flow: row wrap;\n    padding: 0.1em;\n    justify-content: center;\n\n    :focus {\n        outline: none;\n        border: none;\n    }\n    @media screen and (max-width: 1140px) {\n        padding: 1.5em;\n    }\n    @media screen and (max-width: 992px) {\n        padding: 1em 0.65em;\n    }\n    @media screen and (max-width: 768px) {\n        padding: 0.35em;\n    }\n    @media screen and (max-width: 576px) {\n        padding: 0.1em;\n    }\n`;\n\nconst TitleContainer = styled.div`\n    color: ${({ theme }) => theme.secondary};\n    font-size: 1.6em;\n    padding-left: 0.6em;\n    width: 100%;\n    font-weight: bold;\n    border-bottom: 1px solid ${({ theme }) => theme.secondary};\n`\n\nconst ButtonWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nconst Button = styled.button`\n    display: flex;\n    height: 60px;\n    align-items: center;\n    background: transparent;\n    border: 1px solid ${({ theme }) => theme.secondary};\n    padding: 1.3em;\n    margin: 1em 0 3em 0;\n    color: white;\n    border-radius: 1em;\n    font-weight: bold;\n    cursor: pointer;\n`\n\n/**\n * Movie List Component that fetches data and then displays a MovieCard list\n * \n * @component\n * @param {Object} listObject - List Object containing different properties\n * @param {boolean} listObject.isLoading - ListObject property that shows whether data for a given list is being fetched\n * @param {boolean} listObject.isError - ListObject property that shows whether or not there was an error during data fetch\n * @param {number[]} listObject.list - ListObject property that contains a list of movie ids\n * @param {Object} config - Config Object containing different properties\n * @param {boolean} config.isLoading - Config property that shows whether the config data is being fetched\n * @param {Function} fetchDataCallback - Redux Action that performs the data fetch for a given list\n */\nconst MovieList = ({ listObject, fetchDataCallback, config, title }) => {\n    /**\n     * Initialise data on mount by calling fetchDataCallback action\n     */\n    useEffect(() => {\n        // only dispatch action if list object is not in store\n        if(!listObject){\n            fetchDataCallback()\n        }\n    }, [listObject, fetchDataCallback])\n\n    const handleClick = () => {\n        fetchDataCallback();\n    }\n    \n    return (\n        <>\n            <TitleContainer>{title}</TitleContainer>\n            {listObject && 'list' in listObject && config && !config.isLoading && listObject.list.length > 0 &&(\n                <>\n                    <MovieCardContainer>\n                        {listObject.list && listObject.list.map(id => (\n                            <Card id={id} key={id} />\n                        ))}\n                    </MovieCardContainer>\n                    <ButtonWrapper>\n                        <Button onClick={() => handleClick()} disabled={listObject.isLoading}>\n                            {listObject.isLoading ? <Loader color={theme.secondary} /> : 'Fetch More'}\n                        </Button>\n                    </ButtonWrapper>\n                </>\n            )}\n\n            {listObject && config && (listObject.isLoading || config.isLoading) && !listObject.list &&(\n                <Loader color={theme.secondary} />\n            )}\n\n            {listObject && config && !listObject.isLoading && !config.isLoading && listObject.list.length <= 0 && (\n                <Error text={'Could Not Find List'} />\n            )}\n\n            {listObject && listObject.isError && (\n                <Error text={'Something went wrong :('} />\n            )}\n        </>\n)}\n\nexport default MovieList;","import { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport MovieList from 'components/MovieList';\n\n/**\n * @function connectMovieList - Connects a list to a MovieList Component\n * @param {string} id - The List id\n * @param {string} title - Movie list title\n * @param {Function} fetchDataCallback - Redux Action that performs the data fetch\n */\nconst connectMovieList = ({ id, title, fetchDataCallback }) => {\n    return connect(state => {\n        const listObject = get(state, `movies.lists.${id}`);\n        return {\n            listObject: listObject || null,\n            config: get(state, 'config'),\n            title: title || ''\n        }\n    }, dispatch => ({\n        fetchDataCallback: () => dispatch(fetchDataCallback()),\n    }))(MovieList);\n}\n\nexport default connectMovieList;","import { getPopularList } from 'stores/movies/actions';\nimport connectMovieList from 'helpers/connectMovieList';\n\nexport default connectMovieList({ \n    id: 'popular',\n    title: 'Popular Movies',\n    fetchDataCallback: getPopularList \n})","import { getTopRatedList } from 'stores/movies/actions';\nimport connectMovieList from 'helpers/connectMovieList';\n\nexport default connectMovieList({ \n    id: 'topRated',\n    title: 'Top Rated Movies',\n    fetchDataCallback: getTopRatedList \n})","import { getNowPlayingList } from 'stores/movies/actions';\nimport connectMovieList from 'helpers/connectMovieList';\n\nexport default connectMovieList({ \n    id: 'nowPlaying', \n    title: 'Now Playing',\n    fetchDataCallback: getNowPlayingList \n})","import React from 'react'\nimport { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport MovieList from 'components/MovieList';\nimport { getGenreMovieList } from 'stores/movies/actions';\n\nconst GenreList = props => (\n    <MovieList {...props} />\n)\n\nexport default connect((state, ownProps) => {\n    const listObject = get(state, `movies.lists.genre/${ownProps.id}`);\n    const config = get(state, 'config');\n\n    // fetch the title from config after config is loaded\n    let title = null;\n    if(config && 'genres' in config){\n        title = get(config['genres'].find(g => g.id.toString() === ownProps.id), 'name') || null\n        if(title){\n            title = `${title} Genre`\n        }\n    }\n\n    return {\n        listObject: listObject || null,\n        config,\n        title,\n    }\n}, (dispatch, ownProps) => ({\n    fetchDataCallback: () => dispatch(getGenreMovieList(ownProps.id)),\n}))(GenreList);;","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useHistory } from 'react-router-dom';\nimport get from 'lodash.get';\nimport styled from 'styled-components';\nimport ReactPlayer from 'react-player';\nimport { getMovieDetails } from 'api';\nimport theme from 'helpers/theme';\nimport Error from 'components/Error';\nimport Loader from 'components/Loader';\nimport MovieCard from 'components/MovieCard'\n\nconst Background = styled.div`\n    position: fixed;\n    top: 0;\n    opacity: 0.2;\n    width: 100%;\n    max-width: 100%;\n    height: 100%;\n    background: url('https://image.tmdb.org/t/p/original/${props => props.background}') no-repeat center center fixed;;\n    background-size: cover;\n    background-repeat: no-repeat;\n    filter: saturate(0.4);\n    z-index: -1;\n`\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    color: ${({ theme }) => theme.secondary};\n    padding: 1em;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        padding: 0 .7em;\n    }\n`\n\nconst HeaderWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        flex-direction: column;\n    }\n`\n\nconst TitleWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        flex-direction: column;\n    }\n`\n\nconst Title = styled.div`\n    display: flex;\n    align-items: center;\n    font-size: 2em;\n    font-weight: bold;\n    flex-wrap: wrap;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        font-size: 1.6em;\n    }\n\n    > span:first-child {\n        margin-left: 0.2em;\n        font-size: 0.5em;\n    }\n`\n\nconst Genres = styled.div`\n    display: flex;\n    margin-left: .4em;\n    flex-wrap: wrap;\n\n    > div {\n        font-size: 0.65em;\n        margin: 0.3em;\n        border: 1px solid ${({ theme }) => theme.secondary};\n        padding: .3em;\n        border-radius: .5em;\n        font-weight: 300;\n\n        :hover {\n            cursor: pointer\n        }\n\n        @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n            font-size: .9em;\n            justify-content: center;\n            margin-bottom: .5em;\n        }\n    }\n`\n\nconst InfoTitle = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    span {\n        :first-child{\n            margin-right: 1em;\n        }\n\n        svg:first-child{\n            margin-right: 0.3em;\n        }\n\n        > span {\n            font-size: .6em;\n            margin-left: .2em;\n        }\n    }\n`\n\nconst TagLine = styled.div`\n    font-weight: 300;\n    font-size: 1em;\n    font-style: italic;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        margin-top: 1em;\n        text-align: center;\n        font-size: 1em;\n    }\n`\nconst InfoWrapper = styled.div`\n    margin-top: 1em;\n\n    * > a {\n        color: skyblue;\n    }\n`\n\nconst Overview = styled.div`\n    margin-top: 1em;\n    font-size: .9em;\n    text-align: justify;\n`\n\nconst VideoWrapper = styled.div`\n    width: 100%;\n    margin: 1em 0;\n`\n\nconst Similar = styled.div`\n    display: flex;\n    flex-flow: row wrap;\n    padding: 0.1em;\n    justify-content: center;\n`\n\nconst Movie = ({ id, movieRx , secureBaseUrl, posterSize }) => {\n    const [movieData, setMovieData] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const history = useHistory();\n\n    /* \n        Use this effect to load data already in redux\n        Data will be replaced by api call but if is Client routed, background will load before data is fetched\n    */\n    useEffect(() => {\n        if(movieRx){\n            setMovieData(movieRx)\n        }\n    }, [movieRx])\n\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                setIsLoading(true)\n                const data = await getMovieDetails(id);\n                setMovieData(data)\n                setIsLoading(false)\n            } catch(e){\n                setIsLoading(false)\n                setIsError(true);\n            }\n        }\n\n        getData()\n    }, [id, movieRx])\n\n\n    return (\n        <>\n            {isError && (\n                <Error text={'Could not find movie'} />\n            )}\n            {movieData && movieData.id.toString() === id && !isError &&(\n                <>\n                    <Background background={movieData.backdrop_path} />\n                    <Wrapper>\n                        {!isLoading && (\n                            <>\n                                <HeaderWrapper>\n                                    <TitleWrapper>\n                                        <Title>\n                                            {movieData.title}\n                                            <span>({new Date(movieData.release_date).getFullYear()})</span>\n                                        </Title>\n                                        <Genres>\n                                            {movieData.genres.map(g => (\n                                                <div key={g.id} onClick={() => history.push(`/genre/${g.id}`)}>\n                                                    {g.name}\n                                                </div>\n                                            ))}\n                                        </Genres>\n                                    </TitleWrapper>\n                                    <InfoTitle>\n                                        <span><FontAwesomeIcon icon=\"clock\" />{movieData.runtime}mins</span>\n                                        <span>\n                                            <FontAwesomeIcon icon=\"star\" />\n                                            {movieData.vote_average}\n                                            <span>\n                                                ({movieData.vote_count} votes)\n                                            </span>\n                                        </span>\n                                    </InfoTitle>\n                                </HeaderWrapper>\n                                <TagLine>\n                                    {movieData.tagline}\n                                </TagLine>\n                                <InfoWrapper>\n                                    <div>\n                                        Release Date: {movieData.release_date}\n                                    </div>\n                                    <div>\n                                        Homepage: {movieData.homepage && <a href={movieData.homepage} target=\"_blank\" rel=\"noopener noreferrer\">{movieData.homepage}</a>}\n                                    </div>\n                                </InfoWrapper>\n                                <Overview>\n                                    {movieData.overview}\n                                </Overview>\n                                <VideoWrapper>\n                                    {movieData.videos && movieData.videos.results.length > 1 && movieData.videos.results[0].site === 'YouTube' && (\n                                        <ReactPlayer \n                                            url={`https://www.youtube.com/embed/${get(get(movieData, 'videos.results[0]'), 'key')}`} \n                                            playing={true} \n                                            width=\"100%\" \n                                            controls={true} \n                                        />\n                                    )}\n                                </VideoWrapper>\n                                {movieData.similar && movieData.similar.results.length > 0 && (\n                                    <>\n                                        <h2>You may also be interested in</h2>\n                                        <Similar>\n                                            {movieData.similar.results.map(movie => (\n                                                <MovieCard movie={movie} key={movie.id} />\n                                            ))}\n                                        </Similar>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Wrapper>\n                </>\n            )}\n            {isLoading && (\n                <Loader color={theme.secondary} />\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = (state, props) => {\n    const data = get(state, 'movies.data');\n    const imagesConfig = get(state, 'config.images');\n    \n    return {\n        movieRx: data[props.id] || null,\n        secureBaseUrl: get(imagesConfig, 'secure_base_url'),\n        posterSize: get(imagesConfig, 'poster_sizes[3]'),\n    }\n}\n\nexport default connect(mapStateToProps, null)(Movie)","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { initConfig } from 'stores/config/actions';\n\nimport 'helpers/fontAwesomeLibrary';\nimport theme from 'helpers/theme';\n\nimport Header from 'components/Header';\nimport Menu from 'components/Menu';\nimport GenreList from 'components/GenreList'\nimport Error from 'components/Error';\n\nimport PopularMovies from 'routes/PopularMovies';\nimport TopRatedMovies from 'routes/TopRatedMovies';\nimport NowPlayingMovies from 'routes/NowPlayingMovies';\nimport MoviesByGenre from 'routes/MoviesByGenre';\nimport Movie from 'routes/Movie';\n\nconst GlobalStyle = createGlobalStyle`\n    html, body, #root {\n        height: 100%;\n    }\n    body {\n        background-color: #2c3949;\n        font-family: 'Poppins';\n        margin: 0;\n        overflow-x: hidden;\n    }\n`\n\nconst App = ({ location, initConfigRx }) => {\n\n    useEffect(() => {\n        initConfigRx();\n    }, [initConfigRx])\n\n    return (\n        <>\n            <GlobalStyle />\n            <ThemeProvider theme={theme}>\n                <Header />\n                <Menu />\n                <Switch location={location}>\n                    <Route exact={true} path=\"/\" component={PopularMovies} />\n                    <Route exact={true} path=\"/top\" component={TopRatedMovies} />\n                    <Route exact={true} path=\"/now-playing\" component={NowPlayingMovies} />\n                    <Route\n                            path=\"/genre/:id\"\n                            render={props => (\n                                <>\n                                    <GenreList />\n                                    <MoviesByGenre id={props.match.params.id} />\n                                </>\n                            )}\n                        />\n                    <Route\n                        path=\"/movie/:id\"\n                        render={props => (\n                            <Movie id={props.match.params.id} />\n                        )}\n                    />\n                    <Route render={() => (<Error text={'Page not found'} />)} />\n                </Switch>\n            </ThemeProvider>\n        </>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n    initConfigRx: () => dispatch(initConfig()),\n})\n\n\nexport default connect(null, mapDispatchToProps)(App)","import { SET_CONFIG, ERROR_SET_CONFIG, INIT_SET_CONFIG } from './types';\nimport { getConfiguration, getGenres } from 'api';\n\nexport const initConfig = () => async dispatch => {\n    try {\n        dispatch({ type: INIT_SET_CONFIG })\n\n        const config = await getConfiguration()\n        const genres = await getGenres()\n    \n        dispatch({\n            type: SET_CONFIG,\n            payload: {\n                ...config,\n                ...genres\n            },\n        })\n    } catch(e){\n        dispatch({\n            type: ERROR_SET_CONFIG\n        })\n    }\n};","export const SET_CONFIG = 'SET_CONFIG';\nexport const INIT_SET_CONFIG = 'INIT_SET_CONFIG';\nexport const ERROR_SET_CONFIG = 'ERROR_SET_CONFIG';","import { INIT_SET_CONFIG, SET_CONFIG, ERROR_SET_CONFIG } from './types';\n\nconst initialState = null;\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case INIT_SET_CONFIG: {\n            return {\n                isLoading: true\n            }\n        }\n        case SET_CONFIG: {\n            return {\n                isLoading: false,\n                ...action.payload\n            }\n        }\n        case ERROR_SET_CONFIG: {\n            return null;\n        }\n        default:\n            return state;\n    }\n};","import get from 'lodash.get';\nimport { SET_MOVIE, SET_MOVIES, SET_LIST, ERROR_FETCH_LIST, INIT_FETCH_LIST } from './types';\n\nconst initialState = {\n    lists: {},\n    data: {}\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_MOVIE: {\n            return {\n                ...state,\n                [action.payload.id]: {\n                    ...action.payload\n                }\n            }\n        }\n        case SET_MOVIES: {\n            const movies = {}\n            action.payload.movies.forEach(movie => {\n                // do not overwrite any movies already in state\n                if(!(movie.id in state.data)){\n                    movies[movie.id] = { ...movie };\n                }else{\n                    console.log(`Movie ID: ${movie.id} already in state... Skipping`)\n                }\n            });\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    ...movies\n                }\n            }\n        }\n        case INIT_FETCH_LIST: {\n            const id = action.payload.id\n            const listObject = get(state.lists, id);\n\n            return {\n                ...state,\n                lists: {\n                    ...state.lists,\n                    [action.payload.id]: {\n                        ...listObject,\n                        isLoading: true,\n                        isError: false,\n                    }\n                }\n            }\n        }\n        case ERROR_FETCH_LIST: {\n            const id = action.payload.id\n            const listObject = get(state.lists, id);\n\n            return {\n                ...state,\n                lists: {\n                    ...state.lists,\n                    [action.payload.id]: {\n                        ...listObject,\n                        isLoading: false,\n                        isError: true,\n                        index: action.payload.index,\n                    }\n                }\n            }\n        }\n        case SET_LIST: {\n            const id = action.payload.id;\n            let list = get(get(state.lists, id), 'list') // list inside list object\n\n            return {\n                ...state,\n                lists: {\n                    ...state.lists,\n                    [action.payload.id]:{\n                        isLoading: false,\n                        isError: false,\n                        index: action.payload.index,\n                        list: list ? list.concat(action.payload.list) : action.payload.list\n                    }\n                }\n            }\n        }\n        default:\n            return state;\n    }\n};","import { TOGGLE_SEARCH, TOGGLE_MENU } from './types';\n\nconst initialState = {\n    showSearch: false,\n    showMenu: false\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_SEARCH: {\n            return {\n                ...state,\n                showSearch: action.payload === null ? !state.showSearch : action.payload\n            }\n        }\n        case TOGGLE_MENU: {\n            return {\n                ...state,\n                showMenu: action.payload === null ? !state.showMenu : action.payload\n            }\n        }\n        default:\n            return state;\n    }\n};","import { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport config from './config/reducer';\nimport movies from './movies/reducer';\nimport ui from './ui/reducer';\n\nconst makeStore = () => createStore(\n    combineReducers({\n        config,\n        movies,\n        ui\n    }),\n    compose(\n        applyMiddleware(thunk),\n        typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f, // eslint-disable-line no-underscore-dangle\n    ),\n);\n\nexport default makeStore;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from \"react-router-dom\";\nimport App from 'components/App';\nimport makeStore from './stores'\nimport * as serviceWorker from './serviceWorker';\n\naxios.defaults.baseURL = process.env.REACT_APP_TMDB_API_BASE_URL;\n\n// Check if key is defined, if not assume a proxy is being used\nif(process.env.REACT_APP_TMDB_API_KEY){\n    axios.defaults.params = {}\n    axios.defaults.params['api_key'] = process.env.REACT_APP_TMDB_API_KEY;\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={makeStore()}>\n            <HashRouter>\n                <App />\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}