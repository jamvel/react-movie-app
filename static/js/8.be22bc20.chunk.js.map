{"version":3,"sources":["routes/Movie/index.js","components/MovieCard/index.js"],"names":["Background","styled","div","props","secureBaseUrl","background","Wrapper","theme","secondary","breakpoints","sm","HeaderWrapper","TitleWrapper","Title","Genres","InfoTitle","TagLine","InfoWrapper","Overview","VideoWrapper","Similar","connect","state","data","get","imagesConfig","movieRx","id","useState","movieData","setMovieData","isLoading","setIsLoading","isError","setIsError","history","useHistory","useEffect","a","getMovieDetails","getData","text","toString","backdrop_path","title","Date","release_date","getFullYear","genres","map","g","key","onClick","push","name","icon","runtime","vote_average","vote_count","tagline","homepage","href","target","rel","overview","videos","results","length","site","url","playing","width","controls","similar","movie","color","MovieCardParent","StyledImg","img","posterSize","src"],"mappings":"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","file":"static/js/8.be22bc20.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useHistory } from 'react-router-dom';\nimport get from 'lodash.get';\nimport styled from 'styled-components';\nimport ReactPlayer from 'react-player';\nimport { getMovieDetails } from 'api';\nimport theme from 'helpers/theme';\nimport Error from 'components/Error';\nimport Loader from 'components/Loader';\nimport MovieCard from 'components/MovieCard'\n\nconst Background = styled.div`\n    position: fixed;\n    top: 0;\n    opacity: 0.2;\n    width: 100%;\n    max-width: 100%;\n    height: 100%;\n    background: url('${props => props.secureBaseUrl}original/${props => props.background}') no-repeat center center fixed;;\n    background-size: cover;\n    background-repeat: no-repeat;\n    filter: saturate(0.4);\n    z-index: -1;\n`\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    color: ${({ theme }) => theme.secondary};\n    padding: 1em;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        padding: 0 .7em;\n    }\n`\n\nconst HeaderWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        flex-direction: column;\n    }\n`\n\nconst TitleWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        flex-direction: column;\n    }\n`\n\nconst Title = styled.div`\n    display: flex;\n    align-items: center;\n    font-size: 2em;\n    font-weight: bold;\n    flex-wrap: wrap;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        font-size: 1.6em;\n    }\n\n    > span:first-child {\n        margin-left: 0.2em;\n        font-size: 0.5em;\n    }\n`\n\nconst Genres = styled.div`\n    display: flex;\n    margin-left: .4em;\n    flex-wrap: wrap;\n\n    > div {\n        font-size: 0.65em;\n        margin: 0.3em;\n        border: 1px solid ${({ theme }) => theme.secondary};\n        padding: .3em;\n        border-radius: .5em;\n        font-weight: 300;\n\n        :hover {\n            cursor: pointer\n        }\n\n        @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n            font-size: .9em;\n            justify-content: center;\n            margin-bottom: .5em;\n        }\n    }\n`\n\nconst InfoTitle = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    span {\n        :first-child{\n            margin-right: 1em;\n        }\n\n        svg:first-child{\n            margin-right: 0.3em;\n        }\n\n        > span {\n            font-size: .6em;\n            margin-left: .2em;\n        }\n    }\n`\n\nconst TagLine = styled.div`\n    font-weight: 300;\n    font-size: 1em;\n    font-style: italic;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.sm}) {\n        margin-top: 1em;\n        text-align: center;\n        font-size: 1em;\n    }\n`\nconst InfoWrapper = styled.div`\n    margin-top: 1em;\n\n    * > a {\n        color: skyblue;\n    }\n`\n\nconst Overview = styled.div`\n    margin-top: 1em;\n    font-size: .9em;\n    text-align: justify;\n`\n\nconst VideoWrapper = styled.div`\n    width: 100%;\n    margin: 1em 0;\n`\n\nconst Similar = styled.div`\n    display: flex;\n    flex-flow: row wrap;\n    padding: 0.1em;\n    justify-content: center;\n`\n/**\n * HOC component to show Movie info\n * - This HOC will fetch data from the API each time the /movie/:id route is hit\n * - Data from redux will be re written by the components internal state\n * - Component does not dispatch any actions to redux when a movie is fetched to limit the amount of data stored in redux\n * \n * @name Route/Movie\n * @component\n * @param {string} id - The movie id\n * @param {Object} movieRx - The movie data from redux\n * @param {string} secureBaseUrl - URL to fetch the asset from \n */\nconst Movie = ({ id, movieRx, secureBaseUrl }) => {\n    const [movieData, setMovieData] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const history = useHistory();\n\n    /* \n        Use this effect to load data already in redux\n        Data will be replaced by api call but if is Client routed, background will load before data is fetched\n    */\n    useEffect(() => {\n        if(movieRx){\n            setMovieData(movieRx)\n        }\n    }, [movieRx])\n\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                setIsLoading(true)\n                const data = await getMovieDetails(id);\n                setMovieData(data)\n                setIsLoading(false)\n            } catch(e){\n                setIsLoading(false)\n                setIsError(true);\n            }\n        }\n\n        getData()\n    }, [id, movieRx])\n\n\n    return (\n        <>\n            {isError && (\n                <Error text={'Could not find movie'} />\n            )}\n            {/* Check that the id matches the id inside the data so that a re render occurs */}\n            {movieData && movieData.id.toString() === id && !isError &&(\n                <>\n                    <Background background={movieData.backdrop_path} secureBaseUrl={secureBaseUrl} />\n                    <Wrapper>\n                        {!isLoading && (\n                            <>\n                                <HeaderWrapper>\n                                    <TitleWrapper>\n                                        <Title>\n                                            {movieData.title}\n                                            <span>({new Date(movieData.release_date).getFullYear()})</span>\n                                        </Title>\n                                        <Genres>\n                                            {movieData.genres.map(g => (\n                                                <div key={g.id} onClick={() => history.push(`/genre/${g.id}`)}>\n                                                    {g.name}\n                                                </div>\n                                            ))}\n                                        </Genres>\n                                    </TitleWrapper>\n                                    <InfoTitle>\n                                        <span><FontAwesomeIcon icon=\"clock\" />{movieData.runtime}mins</span>\n                                        <span>\n                                            <FontAwesomeIcon icon=\"star\" />\n                                            {movieData.vote_average}\n                                            <span>\n                                                ({movieData.vote_count} votes)\n                                            </span>\n                                        </span>\n                                    </InfoTitle>\n                                </HeaderWrapper>\n                                <TagLine>\n                                    {movieData.tagline}\n                                </TagLine>\n                                <InfoWrapper>\n                                    <div>\n                                        Release Date: {movieData.release_date}\n                                    </div>\n                                    <div>\n                                        Homepage: {movieData.homepage && <a href={movieData.homepage} target=\"_blank\" rel=\"noopener noreferrer\">{movieData.homepage}</a>}\n                                    </div>\n                                </InfoWrapper>\n                                <Overview>\n                                    {movieData.overview}\n                                </Overview>\n                                <VideoWrapper>\n                                    {movieData.videos && movieData.videos.results.length > 1 && movieData.videos.results[0].site === 'YouTube' && (\n                                        <ReactPlayer \n                                            url={`https://www.youtube.com/embed/${get(get(movieData, 'videos.results[0]'), 'key')}`} \n                                            playing={true} \n                                            width=\"100%\" \n                                            controls={true} \n                                        />\n                                    )}\n                                </VideoWrapper>\n                                {movieData.similar && movieData.similar.results.length > 0 && (\n                                    <>\n                                        <h2>You may also be interested in</h2>\n                                        <Similar>\n                                            {movieData.similar.results.map(movie => (\n                                                <MovieCard movie={movie} key={movie.id} />\n                                            ))}\n                                        </Similar>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Wrapper>\n                </>\n            )}\n            {isLoading && (\n                <Loader color={theme.secondary} />\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = (state, props) => {\n    const data = get(state, 'movies.data');\n    const imagesConfig = get(state, 'config.images');\n    \n    return {\n        movieRx: data[props.id] || null,\n        secureBaseUrl: get(imagesConfig, 'secure_base_url')\n    }\n}\n\nexport default connect(mapStateToProps, null)(Movie)","import React from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nconst MovieCardParent = styled.div`\n    position: relative;\n    flex: 0 0 17%;\n    display: flex;\n    justify-content: space-around;\n    margin: 1em;\n    transition: transform 0.3s ease;\n    color: white;\n\n    :hover {\n        cursor: pointer;\n        transform: scale(1.1);\n        z-index: 2;\n    }\n\n    @media screen and (max-width: 1440px) {\n        flex: 1 0 15%;\n    }\n    @media screen and (max-width: 720px) {\n        flex: 0 0 25%;\n    }\n    @media screen and (max-width: 540px) {\n        flex: 1 0 33%;\n    }\n`\n\nconst StyledImg = styled.img`\n    width: 100%;\n    height: 100%;\n`;\n\n/**\n * @name MovieCard\n * @component\n * @param {Object} movie - The movie Object containing the data\n * @param {string} secureBaseUrl - URL to fetch the asset\n * @param {string} posterSize - Size of poster image \n */\nconst MovieCard = ({ movie, secureBaseUrl, posterSize }) => {\n    const history = useHistory();\n    return (\n        <>\n            {/* check that movie is defined in state before rendering */}\n            {movie && (\n                <MovieCardParent onClick={() => history.push(`/movie/${get(movie, 'id')}`)}>\n                <StyledImg\n                    src={`${secureBaseUrl}${posterSize}/${get(movie, 'poster_path')}`}\n                />\n                </MovieCardParent>\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = (state, props) => {\n    const data = get(state, 'movies.data');\n    const imagesConfig = get(state, 'config.images');\n    \n    return {\n        movie: props.movie || data[props.id] || null,\n        secureBaseUrl: get(imagesConfig, 'secure_base_url'),\n        posterSize: get(imagesConfig, 'poster_sizes[3]')\n    }\n}\n\nexport default connect(mapStateToProps, null)(MovieCard)\n"],"sourceRoot":""}